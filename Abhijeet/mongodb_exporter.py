from prometheus_client import start_http_server, Metric, Summary,REGISTRY
import sys
from pymongo import MongoClient
import json
from pprint import pprint


class CustomCollector(object):
	

	def collect(self):
		

		client = MongoClient('localhost', 27017)
		# Get the sampleDB database
		db = client.test
		user=db.command("dbstats")
		user2=db.command("serverStatus")
	############throughput#########################

		metric = Metric('globalLock','Number of clients with read operations in progress or queued','summary')
		metric.add_sample('globalLock.activeClients.readers',value=user2['globalLock']['activeClients']['readers'],labels={})
		yield metric

		metric = Metric('globalLock','Number of clients with write operations in progress or queued','summary')
		metric.add_sample('globalLock.activeClients.writers',value=user2['globalLock']['activeClients']['writers'],labels={})
		yield metric

		metric = Metric('opcounters','Number of read requests received during the selected time period (query)','summary')
		metric.add_sample('opcounters.query',value=user2['opcounters']['query'],labels={})
		yield metric

		metric = Metric('opcounters','Number of read requests received during the selected time period (getmore)','summary')
		metric.add_sample('opcounters.getmore',value=user2['opcounters']['getmore'],labels={})
		yield metric

		metric = Metric('opcounters','Number of write requests received during the selected time period (insert)','summary')
		metric.add_sample('opcounters.insert',value=user2['opcounters']['insert'],labels={})
		yield metric

		metric = Metric('opcounters','Number of write requests received during the selected time period (update)','summary')
		metric.add_sample('opcounters.update',value=user2['opcounters']['update'],labels={})
		yield metric

		metric = Metric('opcounters','Number of write requests received during the selected time period (delete)','summary')
		metric.add_sample('opcounters.delete',value=user2['opcounters']['delete'],labels={})
		yield metric
		
	############resource saturation################	

		metric = Metric('globalLock','Number of write requests currently queued','summary')
		metric.add_sample('globalLock.currentQueue.writer',value=user2['globalLock']['currentQueue']['writers'],labels={})
		yield metric

		metric = Metric('globalLock','Number of read requests currently queued','summary')
		metric.add_sample('globalLock.currentQueue.readers',value=user2['globalLock']['currentQueue']['readers'],labels={})
		yield metric


       ############# errors ###########################

		metric = Metric('asserts','Number of message assertions raised during the selected time period ','summary')
		metric.add_sample('asserts.msg',value=user2['asserts']['msg'],labels={})
		yield metric

		metric = Metric('asserts','Number of warning assertions raised during the selected time period','summary')
		metric.add_sample('asserts.warning',value=user2['asserts']['warning'],labels={})
		yield metric


		metric = Metric('asserts','Number of regular assertions raised during the selected time period','summary')
		metric.add_sample('asserts.regular',value=user2['asserts']['regular'],labels={})
		yield metric

		metric = Metric('asserts','Number of assertions corresponding to errors generated by users during the selected time period','summary')
		metric.add_sample('asserts.user',value=user2['asserts']['user'],labels={})
		yield metric

	###############resource utilization #########

					#### cache metrics #####

		metric = Metric('Cache Metrics','Amount of space taken by cached data (bytes)','summary')
		metric.add_sample('wiredTiger.cache.bytes currently in the cache',value=user2['wiredTiger']['cache']['bytes currently in the cache'],labels={})
		yield metric

		metric = Metric('Cache Metrics','Maximum cache size configured (bytes)','summary')
		metric.add_sample('wiredTiger.cache.maximum bytes configured',value=user2['wiredTiger']['cache']['maximum bytes configured'],labels={})
		yield metric

		
		metric = Metric('Cache Metrics','Number of pages evicted from the cache','summary')
		metric.add_sample('wiredTiger.cache.modified pages evicted',value=user2['wiredTiger']['cache']['modified pages evicted'],labels={})
		yield metric

		metric = Metric('Cache Metrics','Number of pages evicted from the cache','summary')
		metric.add_sample('wiredTiger.cache.unmodified pages evicted',value=user2['wiredTiger']['cache']['unmodified pages evicted'],labels={})
		yield metric

		metric = Metric('Cache Metrics','Amount of space taken by dirty data in the cache (bytes) ','summary')
		metric.add_sample('wiredTiger.cache.tracked dirty bytes in the cache ',value=user2['wiredTiger']['cache']['tracked dirty bytes in the cache'],labels={})
		yield metric
					######memory metrics#####

		metric = Metric('Memory Metrics:','Virtual memory usage (MB)','summary')
		metric.add_sample('mem.virtual',value=user2['mem']['virtual'],labels={})
		yield metric
		

		metric = Metric('Memory Metrics:','Amount of memory used by the database process (MB)','summary')
		metric.add_sample('mem.resident',value=user2['mem']['resident'],labels={})
		yield metric

		metric = Metric('Memory Metrics:','Number of times MongoDB had to request from disk (per second)','summary')
		metric.add_sample('extra_info.page_faults',value=user2['extra_info']['page_faults'],labels={})
		yield metric

					######storage metrics ######
		
		metric = Metric('Storage Metrics:','Number of objects (documents) among all the collections','summary')
		metric.add_sample('objects',value=user['objects'],labels={})
		yield metric

		metric = Metric('Storage Metrics:','Size of all documents (bytes)','summary')
		metric.add_sample('dataSize',value=user['dataSize'],labels={})
		yield metric

		metric = Metric('Storage Metrics:','Size of all indexes (bytes)','summary')
		metric.add_sample('indexSize',value=user['indexSize'],labels={})
		yield metric

		metric = Metric('Storage Metrics:','Size of all extents (bytes)','summary')
		metric.add_sample('storageSize',value=user['storageSize'],labels={})
		yield metric
		
					######connections###########

		metric = Metric('Connections:','Number of clients currently connected to the database server','summary')
		metric.add_sample('connections.current',value=user2['connections']['current'],labels={})
		yield metric

		metric = Metric('Connections:','Number of unused connections available for new clients ','summary')
		metric.add_sample('connections.available',value=user2['connections']['available'],labels={})
		yield metric

	############## database performance #################################


					######cursors#############

		metric = Metric('Cursors:','Number of cursors currently opened by MongoDB for clients','summary')
		metric.add_sample('metrics.cursor.open.total',value=user2['metrics']['cursor']['open']['total'],labels={})
		yield metric


		metric = Metric('Cursors:','Number of cursors that have timed out during the selected time period','summary')
		metric.add_sample('metrics.cursor.timedOut',value=user2['metrics']['cursor']['timedOut'],labels={})
		yield metric


		metric = Metric('Cursors:','The number of open cursors with timeout disabled','summary')
		metric.add_sample('metrics.cursor.open.noTimeout',value=user2['metrics']['cursor']['open']['noTimeout'],labels={})
		yield metric

					#####concurrent operation management########

		metric = Metric('Concurrent operations management:','Number of read tickets in use','summary')
		metric.add_sample('wiredTiger.concurrentTransactions.read.out',value=user2['wiredTiger']['concurrentTransactions']['read']['out'],labels={})
		yield metric


		metric = Metric('Concurrent operations management:','Number of write tickets in use','summary')
		metric.add_sample('wiredTiger.concurrentTransactions.write.out',value=user2['wiredTiger']['concurrentTransactions']['write']['out'],labels={})
		yield metric


		metric = Metric('Concurrent operations management:','Number of available read tickets remaining','summary')
		metric.add_sample('wiredTiger.concurrentTransactions.read.available',value=user2['wiredTiger']['concurrentTransactions']['read']['available'],labels={})
		yield metric


		metric = Metric('Concurrent operations management:','Number of available write tickets remaining','summary')
		metric.add_sample('wiredTiger.concurrentTransactions.write.available',value=user2['wiredTiger']['concurrentTransactions']['write']['available'],labels={})
		yield metric
if __name__ == '__main__':
	#pass port number as argument
	start_http_server(int(sys.argv[1]))
	REGISTRY.register(CustomCollector())
	obj=CustomCollector()
	while True:
		obj.collect()
